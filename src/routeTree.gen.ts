/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WithdrawImport } from './routes/withdraw'
import { Route as TransactionsImport } from './routes/transactions'
import { Route as DepositCryptoImport } from './routes/deposit-crypto'
import { Route as DepositAudImport } from './routes/deposit-aud'
import { Route as CryptoImport } from './routes/crypto'
import { Route as AssetsImport } from './routes/assets'
import { Route as IndexImport } from './routes/index'
import { Route as BuySellCryptoIdImport } from './routes/buy-sell.$cryptoId'
import { Route as AssetsDetailsImport } from './routes/assets.details'
import { Route as AssetsCryptoIdImport } from './routes/assets.$cryptoId'

// Create/Update Routes

const WithdrawRoute = WithdrawImport.update({
  id: '/withdraw',
  path: '/withdraw',
  getParentRoute: () => rootRoute,
} as any)

const TransactionsRoute = TransactionsImport.update({
  id: '/transactions',
  path: '/transactions',
  getParentRoute: () => rootRoute,
} as any)

const DepositCryptoRoute = DepositCryptoImport.update({
  id: '/deposit-crypto',
  path: '/deposit-crypto',
  getParentRoute: () => rootRoute,
} as any)

const DepositAudRoute = DepositAudImport.update({
  id: '/deposit-aud',
  path: '/deposit-aud',
  getParentRoute: () => rootRoute,
} as any)

const CryptoRoute = CryptoImport.update({
  id: '/crypto',
  path: '/crypto',
  getParentRoute: () => rootRoute,
} as any)

const AssetsRoute = AssetsImport.update({
  id: '/assets',
  path: '/assets',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const BuySellCryptoIdRoute = BuySellCryptoIdImport.update({
  id: '/buy-sell/$cryptoId',
  path: '/buy-sell/$cryptoId',
  getParentRoute: () => rootRoute,
} as any)

const AssetsDetailsRoute = AssetsDetailsImport.update({
  id: '/details',
  path: '/details',
  getParentRoute: () => AssetsRoute,
} as any)

const AssetsCryptoIdRoute = AssetsCryptoIdImport.update({
  id: '/$cryptoId',
  path: '/$cryptoId',
  getParentRoute: () => AssetsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/assets': {
      id: '/assets'
      path: '/assets'
      fullPath: '/assets'
      preLoaderRoute: typeof AssetsImport
      parentRoute: typeof rootRoute
    }
    '/crypto': {
      id: '/crypto'
      path: '/crypto'
      fullPath: '/crypto'
      preLoaderRoute: typeof CryptoImport
      parentRoute: typeof rootRoute
    }
    '/deposit-aud': {
      id: '/deposit-aud'
      path: '/deposit-aud'
      fullPath: '/deposit-aud'
      preLoaderRoute: typeof DepositAudImport
      parentRoute: typeof rootRoute
    }
    '/deposit-crypto': {
      id: '/deposit-crypto'
      path: '/deposit-crypto'
      fullPath: '/deposit-crypto'
      preLoaderRoute: typeof DepositCryptoImport
      parentRoute: typeof rootRoute
    }
    '/transactions': {
      id: '/transactions'
      path: '/transactions'
      fullPath: '/transactions'
      preLoaderRoute: typeof TransactionsImport
      parentRoute: typeof rootRoute
    }
    '/withdraw': {
      id: '/withdraw'
      path: '/withdraw'
      fullPath: '/withdraw'
      preLoaderRoute: typeof WithdrawImport
      parentRoute: typeof rootRoute
    }
    '/assets/$cryptoId': {
      id: '/assets/$cryptoId'
      path: '/$cryptoId'
      fullPath: '/assets/$cryptoId'
      preLoaderRoute: typeof AssetsCryptoIdImport
      parentRoute: typeof AssetsImport
    }
    '/assets/details': {
      id: '/assets/details'
      path: '/details'
      fullPath: '/assets/details'
      preLoaderRoute: typeof AssetsDetailsImport
      parentRoute: typeof AssetsImport
    }
    '/buy-sell/$cryptoId': {
      id: '/buy-sell/$cryptoId'
      path: '/buy-sell/$cryptoId'
      fullPath: '/buy-sell/$cryptoId'
      preLoaderRoute: typeof BuySellCryptoIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AssetsRouteChildren {
  AssetsCryptoIdRoute: typeof AssetsCryptoIdRoute
  AssetsDetailsRoute: typeof AssetsDetailsRoute
}

const AssetsRouteChildren: AssetsRouteChildren = {
  AssetsCryptoIdRoute: AssetsCryptoIdRoute,
  AssetsDetailsRoute: AssetsDetailsRoute,
}

const AssetsRouteWithChildren =
  AssetsRoute._addFileChildren(AssetsRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/assets': typeof AssetsRouteWithChildren
  '/crypto': typeof CryptoRoute
  '/deposit-aud': typeof DepositAudRoute
  '/deposit-crypto': typeof DepositCryptoRoute
  '/transactions': typeof TransactionsRoute
  '/withdraw': typeof WithdrawRoute
  '/assets/$cryptoId': typeof AssetsCryptoIdRoute
  '/assets/details': typeof AssetsDetailsRoute
  '/buy-sell/$cryptoId': typeof BuySellCryptoIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/assets': typeof AssetsRouteWithChildren
  '/crypto': typeof CryptoRoute
  '/deposit-aud': typeof DepositAudRoute
  '/deposit-crypto': typeof DepositCryptoRoute
  '/transactions': typeof TransactionsRoute
  '/withdraw': typeof WithdrawRoute
  '/assets/$cryptoId': typeof AssetsCryptoIdRoute
  '/assets/details': typeof AssetsDetailsRoute
  '/buy-sell/$cryptoId': typeof BuySellCryptoIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/assets': typeof AssetsRouteWithChildren
  '/crypto': typeof CryptoRoute
  '/deposit-aud': typeof DepositAudRoute
  '/deposit-crypto': typeof DepositCryptoRoute
  '/transactions': typeof TransactionsRoute
  '/withdraw': typeof WithdrawRoute
  '/assets/$cryptoId': typeof AssetsCryptoIdRoute
  '/assets/details': typeof AssetsDetailsRoute
  '/buy-sell/$cryptoId': typeof BuySellCryptoIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/assets'
    | '/crypto'
    | '/deposit-aud'
    | '/deposit-crypto'
    | '/transactions'
    | '/withdraw'
    | '/assets/$cryptoId'
    | '/assets/details'
    | '/buy-sell/$cryptoId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/assets'
    | '/crypto'
    | '/deposit-aud'
    | '/deposit-crypto'
    | '/transactions'
    | '/withdraw'
    | '/assets/$cryptoId'
    | '/assets/details'
    | '/buy-sell/$cryptoId'
  id:
    | '__root__'
    | '/'
    | '/assets'
    | '/crypto'
    | '/deposit-aud'
    | '/deposit-crypto'
    | '/transactions'
    | '/withdraw'
    | '/assets/$cryptoId'
    | '/assets/details'
    | '/buy-sell/$cryptoId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AssetsRoute: typeof AssetsRouteWithChildren
  CryptoRoute: typeof CryptoRoute
  DepositAudRoute: typeof DepositAudRoute
  DepositCryptoRoute: typeof DepositCryptoRoute
  TransactionsRoute: typeof TransactionsRoute
  WithdrawRoute: typeof WithdrawRoute
  BuySellCryptoIdRoute: typeof BuySellCryptoIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AssetsRoute: AssetsRouteWithChildren,
  CryptoRoute: CryptoRoute,
  DepositAudRoute: DepositAudRoute,
  DepositCryptoRoute: DepositCryptoRoute,
  TransactionsRoute: TransactionsRoute,
  WithdrawRoute: WithdrawRoute,
  BuySellCryptoIdRoute: BuySellCryptoIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/assets",
        "/crypto",
        "/deposit-aud",
        "/deposit-crypto",
        "/transactions",
        "/withdraw",
        "/buy-sell/$cryptoId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/assets": {
      "filePath": "assets.tsx",
      "children": [
        "/assets/$cryptoId",
        "/assets/details"
      ]
    },
    "/crypto": {
      "filePath": "crypto.tsx"
    },
    "/deposit-aud": {
      "filePath": "deposit-aud.tsx"
    },
    "/deposit-crypto": {
      "filePath": "deposit-crypto.tsx"
    },
    "/transactions": {
      "filePath": "transactions.tsx"
    },
    "/withdraw": {
      "filePath": "withdraw.tsx"
    },
    "/assets/$cryptoId": {
      "filePath": "assets.$cryptoId.tsx",
      "parent": "/assets"
    },
    "/assets/details": {
      "filePath": "assets.details.tsx",
      "parent": "/assets"
    },
    "/buy-sell/$cryptoId": {
      "filePath": "buy-sell.$cryptoId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
